[[[[[n^2]]]]]]]

#include <iostream>

using namespace std;

int main()
{
    int n;
    cin>>n;
    int l[n];
    int u[n];
    int temp;
    int s[n];
    for(int i=0;i<n;i++)
    {
        cin>>l[i];
        cin>>u[i];
    }
    
    for(int i=0;i<n;i++)
    {   
        s[i]=0;
        for(int j=0;j<n;j++)
        {
            if(l[i]<l[j] && u[i]>u[j])
            {
                s[i]+=2;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<s[i]<<" ";
    }
}


]]]]]]]

[[[[[[[nlogn]]]]]

#include <iostream>

using namespace std;

    int partition(int arr[], int start, int end)
{
 
    int pivot = arr[start];
 
    int count = 0;
    for (int i = start + 1; i <= end; i++) {
        if (arr[i] <= pivot)
            count++;
    }
 
    int pivotIndex = start + count;
    swap(arr[pivotIndex], arr[start]);
 
    int i = start, j = end;
 
    while (i < pivotIndex && j > pivotIndex) {
 
        while (arr[i] <= pivot) {
            i++;
        }
 
        while (arr[j] > pivot) {
            j--;
        }
 
        if (i < pivotIndex && j > pivotIndex) {
            swap(arr[i++], arr[j--]);
        }
    }
 
    return pivotIndex;
}
 
void quickSort(int arr[], int start, int end)
{
 
    
    if (start >= end)
        return;
 
    
    int p = partition(arr, start, end);
 

    quickSort(arr, start, p - 1);
 

    quickSort(arr, p + 1, end);
}

int search(int arr[],int size,int num){
int beg = 0;  
int end = size - 1;  
while ( beg <= end)  
{  
int mid = (beg + end) / 2;  
if (arr[mid] == num)  
{  
return mid;  
}  
else if (arr[mid] > num)  
{  
    end = mid - 1;  
}  
else if (arr [mid] < num)  
{  
    beg = mid + 1;  
}  
}  
return -1;   
}

int main()
{
  int n;
    cin>>n;
    int l[n];
    int u[n];
    int t;
    int dup[n];
    
    for(int i=0;i<n;i++)
    {
        cin>>l[i];
        cin>>u[i];
    }
    
    for (int i = 0; i < n; i++) {
        dup[i]=l[i];
    }
   
    
    quickSort(dup, 0, n - 1);
    
    for (int i = 0; i < n; i++) {
        t=search(dup,n,l[i]);
        cout<<2*(n-t-1)<<" ";
        
    }
    
 
    return 0;
}


]]]]]